import pygame
from pygame.locals import *
from OpenGL.GL import *
from OpenGL.GLU import *
import random
import numpy as np

# Car models - simplified 3D representations
class Car:
    def __init__(self, color):
        self.color = color
        # Car dimensions
        self.length = 4.0
        self.width = 2.0
        self.height = 1.5
    
    def render(self, x, z):
        # Draw car body
        glColor3fv(self.color)
        
        # Main body
        glBegin(GL_QUADS)
        # Bottom
        glVertex3f(x - self.width/2, 0, z - self.length/2)
        glVertex3f(x + self.width/2, 0, z - self.length/2)
        glVertex3f(x + self.width/2, 0, z + self.length/2)
        glVertex3f(x - self.width/2, 0, z + self.length/2)
        
        # Top
        glVertex3f(x - self.width/2, self.height, z - self.length/2)
        glVertex3f(x + self.width/2, self.height, z - self.length/2)
        glVertex3f(x + self.width/2, self.height, z + self.length/2)
        glVertex3f(x - self.width/2, self.height, z + self.length/2)
        
        # Front
        glVertex3f(x - self.width/2, 0, z + self.length/2)
        glVertex3f(x + self.width/2, 0, z + self.length/2)
        glVertex3f(x + self.width/2, self.height, z + self.length/2)
        glVertex3f(x - self.width/2, self.height, z + self.length/2)
        
        # Back
        glVertex3f(x - self.width/2, 0, z - self.length/2)
        glVertex3f(x + self.width/2, 0, z - self.length/2)
        glVertex3f(x + self.width/2, self.height, z - self.length/2)
        glVertex3f(x - self.width/2, self.height, z - self.length/2)
        
        # Left
        glVertex3f(x - self.width/2, 0, z - self.length/2)
        glVertex3f(x - self.width/2, 0, z + self.length/2)
        glVertex3f(x - self.width/2, self.height, z + self.length/2)
        glVertex3f(x - self.width/2, self.height, z - self.length/2)
        
        # Right
        glVertex3f(x + self.width/2, 0, z - self.length/2)
        glVertex3f(x + self.width/2, 0, z + self.length/2)
        glVertex3f(x + self.width/2, self.height, z + self.length/2)
        glVertex3f(x + self.width/2, self.height, z - self.length/2)
        glEnd()
        
        # Windows (top part)
        glColor3f(0.7, 0.9, 1.0)  # Light blue for windows
        glBegin(GL_QUADS)
        # Front window
        glVertex3f(x - self.width/2 + 0.2, self.height - 0.2, z + self.length/2 - 0.1)
        glVertex3f(x + self.width/2 - 0.2, self.height - 0.2, z + self.length/2 - 0.1)
        glVertex3f(x + self.width/2 - 0.2, self.height - 0.8, z + self.length/2 - 0.1)
        glVertex3f(x - self.width/2 + 0.2, self.height - 0.8, z + self.length/2 - 0.1)
        glEnd()

class ParkingLot:
    def __init__(self):
        self.width = 30.0
        self.length = 40.0
        self.spots = 10
        self.spot_width = 2.5
        self.spot_length = 5.0
        
        # Generate random cars for some spots
        self.cars = []
        car_colors = [
            (1.0, 0.0, 0.0),  # Red
            (0.0, 0.0, 1.0),  # Blue
            (0.0, 1.0, 0.0),  # Green
            (1.0, 1.0, 0.0),  # Yellow
            (1.0, 0.5, 0.0),  # Orange
            (0.5, 0.0, 0.5),  # Purple
            (0.0, 0.5, 0.5),  # Teal
            (0.5, 0.5, 0.5),  # Gray
            (1.0, 0.0, 1.0),  # Magenta
            (0.0, 1.0, 1.0),  # Cyan
        ]
        
        # Randomly assign cars to spots
        occupied_spots = random.sample(range(self.spots), random.randint(5, self.spots))
        for spot in occupied_spots:
            color = random.choice(car_colors)
            car_colors.remove(color)  # Ensure unique colors
            self.cars.append((spot, Car(color)))
    
    def render(self):
        # Draw parking lot ground
        glColor3f(0.2, 0.2, 0.2)  # Dark gray for asphalt
        glBegin(GL_QUADS)
        glVertex3f(-self.width/2, -0.1, -self.length/2)
        glVertex3f(self.width/2, -0.1, -self.length/2)
        glVertex3f(self.width/2, -0.1, self.length/2)
        glVertex3f(-self.width/2, -0.1, self.length/2)
        glEnd()
        
        # Draw parking spots
        for i in range(self.spots):
            # Calculate position (5 spots on each side)
            if i < 5:
                # Left side
                x = -self.width/2 + self.spot_width/2 + 2
                z = -self.length/2 + (i + 0.5) * self.spot_length + 5
            else:
                # Right side
                x = self.width/2 - self.spot_width/2 - 2
                z = -self.length/2 + ((i - 5) + 0.5) * self.spot_length + 5
            
            # Draw parking spot lines
            glColor3f(1.0, 1.0, 1.0)  # White for lines
            glBegin(GL_LINE_LOOP)
            glVertex3f(x - self.spot_width/2, 0.01, z - self.spot_length/2)
            glVertex3f(x + self.spot_width/2, 0.01, z - self.spot_length/2)
            glVertex3f(x + self.spot_width/2, 0.01, z + self.spot_length/2)
            glVertex3f(x - self.spot_width/2, 0.01, z + self.spot_length/2)
            glEnd()
            
            # Draw spot number
            glRasterPos3f(x, 0.01, z)
            for c in str(i+1):
                glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, ord(c))
        
        # Draw cars in their spots
        for spot, car in self.cars:
            if spot < 5:
                # Left side
                x = -self.width/2 + self.spot_width/2 + 2
                z = -self.length/2 + (spot + 0.5) * self.spot_length + 5
            else:
                # Right side
                x = self.width/2 - self.spot_width/2 - 2
                z = -self.length/2 + ((spot - 5) + 0.5) * self.spot_length + 5
            
            car.render(x, z)

def init_gl(width, height):
    glClearColor(0.5, 0.7, 1.0, 1.0)  # Sky blue background
    glEnable(GL_DEPTH_TEST)
    glEnable(GL_LIGHTING)
    glEnable(GL_LIGHT0)
    glLightfv(GL_LIGHT0, GL_POSITION, [0, 10, 0, 1])
    glLightfv(GL_LIGHT0, GL_AMBIENT, [0.2, 0.2, 0.2, 1])
    glLightfv(GL_LIGHT0, GL_DIFFUSE, [0.8, 0.8, 0.8, 1])
    
    glMatrixMode(GL_PROJECTION)
    gluPerspective(45, (width/height), 0.1, 100.0)
    glMatrixMode(GL_MODELVIEW)

def main():
    pygame.init()
    pygame.display.set_caption("3D Parking Lot Simulation")
    display = (800, 600)
    pygame.display.set_mode(display, DOUBLEBUF | OPENGL)
    
    # Initialize OpenGL
    init_gl(display[0], display[1])
    
    # Create parking lot
    parking_lot = ParkingLot()
    
    # Camera position and rotation
    camera_pos = [0, 10, 30]
    camera_rot = [30, 0, 0]
    
    clock = pygame.time.Clock()
    
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return
            
            # Camera controls
            if event.type == pygame.KEYDOWN:
                # Move camera
                if event.key == pygame.K_w:
                    camera_pos[2] -= 1
                if event.key == pygame.K_s:
                    camera_pos[2] += 1
                if event.key == pygame.K_a:
                    camera_pos[0] -= 1
                if event.key == pygame.K_d:
                    camera_pos[0] += 1
                if event.key == pygame.K_q:
                    camera_pos[1] += 1
                if event.key == pygame.K_e:
                    camera_pos[1] -= 1
                
                # Rotate camera
                if event.key == pygame.K_UP:
                    camera_rot[0] += 5
                if event.key == pygame.K_DOWN:
                    camera_rot[0] -= 5
                if event.key == pygame.K_LEFT:
                    camera_rot[1] += 5
                if event.key == pygame.K_RIGHT:
                    camera_rot[1] -= 5
        
        # Clear the screen
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
        
        # Set up camera
        glLoadIdentity()
        glRotatef(camera_rot[0], 1, 0, 0)
        glRotatef(camera_rot[1], 0, 1, 0)
        glRotatef(camera_rot[2], 0, 0, 1)
        glTranslatef(-camera_pos[0], -camera_pos[1], -camera_pos[2])
        
        # Render the parking lot
        parking_lot.render()
        
        # Update the display
        pygame.display.flip()
        clock.tick(30)

if __name__ == "__main__":
    from OpenGL.GLUT import *
    # Initialize GLUT for text rendering
    glutInit()
    main()
